<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>[Chapter 10] Double</TITLE>
<META NAME="author" CONTENT="Mark Grand">
<META NAME="date" CONTENT="Fri Aug  8 15:24:13 1997">
<META NAME="form" CONTENT="html">
<META NAME="metadata" CONTENT="dublincore.0.1">
<META NAME="objecttype" CONTENT="book part">
<META NAME="otheragent" CONTENT="gmat dbtohtml">
<META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc.">
<META NAME="source" CONTENT="SGML">
<META NAME="subject" CONTENT="java">
<META NAME="title" CONTENT="Java Language Reference">
<META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript">
</HEAD>
<body vlink="#551a8b" alink="#ff0000" text="#000000" bgcolor="#FFFFFF" link="#0000ee">

<DIV CLASS=htmlnav>
<H1><a href='index.htm'><IMG SRC="gifs/smbanner.gif"
     ALT="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch10_07.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><B><FONT FACE="ARIEL,HELVETICA,HELV,SANSERIF" SIZE="-1">Chapter 10<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><A HREF="ch10_09.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<DIV CLASS=refnamediv>
<H1>Double</H1>

<H2>Name</H2>

Double

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.54">Synopsis</A></h2>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Class Name:<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>java.lang.Double</tt>

<p>
<DT CLASS=varlistentry>Superclass:<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>java.lang.Number</tt>

<p>
<DT CLASS=varlistentry>Immediate Subclasses:<br>
<DD>

<P CLASS=para>
None

<p>
<DT CLASS=varlistentry>Interfaces Implemented:<br>
<DD>

<P CLASS=para>
None

<p>
<DT CLASS=varlistentry>Availability:<br>
<DD>

<P CLASS=para>
JDK 1.0 or later</DL>
</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.55">Description</A></h2>

<P CLASS=para>
<A NAME="MAN.DOUBLE.1"></A>The <tt CLASS=literal>Double</tt> class provides an object wrapper
for a <tt CLASS=literal>double</tt> value. This is useful when you need
to treat a <tt CLASS=literal>double</tt> value as an object. For example,
there are a number of utility methods that take a reference to an
<tt CLASS=literal>Object</tt> as one of their arguments. You cannot
specify a <tt CLASS=literal>double</tt> value for one of these arguments,
but you can provide a reference to a <tt CLASS=literal>Double</tt> object
that encapsulates the <tt CLASS=literal>double</tt> value.  Furthermore,
as of JDK 1.1, the <tt CLASS=literal>Double</tt> class is necessary to 
support the Reflection API and class literals.

<P CLASS=para>
In Java, <tt CLASS=literal>double</tt> values are represented
using the IEEE 754 format. The <tt CLASS=literal>Double</tt> class provides
constants for the three special values that are mandated by this format:
<tt CLASS=literal>POSITIVE_INFINITY</tt>, <tt CLASS=literal>NEGATIVE_INFINITY</tt>,
and <tt CLASS=literal>NaN</tt> (not-a-number).

<P CLASS=para>
The <tt CLASS=literal>Double</tt> class also provides some utility
methods, such as methods for determining whether a <tt CLASS=literal>double</tt>
value is an infinity value or NaN, for converting <tt CLASS=literal>double</tt>
values to other primitive types, and for converting a <tt CLASS=literal>double</tt>
to a <tt CLASS=literal>String</tt> and vice versa.

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.56">Class Summary</A></h2>

<DIV CLASS=screen>
<P>
<PRE>
public final class java.lang.Double extends java.lang.Number {
    // Constants
    public final static double MAX_VALUE;
    public final static double MIN_VALUE;
    public final static double NaN;
    public final static double NEGATIVE_INFINITY;
    public final static double POSITIVE_INFINITY;
    public final static Class TYPE;                    // New in 1.1
    // Constructors
    public Double(double value);
    public Double(String s);
    // Class Methods
    public static native long doubleToLongBits(double value);
    public static boolean isInfinite(double v);
    public static boolean isNaN(double v);
    public static native double longBitsToDouble(long bits);
    public static String toString(double d);
    public static Double valueOf(String s);
    // Instance Methods
    public byte byteValue();                           // New in 1.1
    public double doubleValue();
    public boolean equals(Object obj);
    public float floatValue();
    public int hashCode();
    public int intValue();
    public boolean isInfinite();
    public boolean isNaN();
    public long longValue();
    public short shortValue();                         // New in 1.1
    public String toString();
}
</PRE>
</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.57">Constants</A></h2>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.140">MAX_VALUE</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.145"><DIV CLASS=screen> <P> <PRE> public static final double MAX_VALUE = 1.79769313486231570e+308 </PRE> </DIV></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
The largest value that can be represented by a <tt CLASS=literal>double</tt>.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.141">MIN_VALUE</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.146"><DIV CLASS=screen> <P> <PRE> public static final double MIN_VALUE = 4.94065645841246544e-324 </PRE> </DIV></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
The smallest value that can be represented by a <tt CLASS=literal>double</tt>.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.142">NaN</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.147"><tt CLASS=literal>public static final double NaN = 0.0 / 0.0</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This variable represents the value not-a-number (NaN), which is a
special value produced by <tt CLASS=literal>double</tt> operations such as
division of zero by zero. When NaN is one of the operands, most
arithmetic operations return NaN as the result.

<P CLASS=para>
Most comparison operators (<tt CLASS=literal>&lt;</tt>,
<tt CLASS=literal>&lt;=</tt>, <tt CLASS=literal>==</tt>,
<tt CLASS=literal>&gt;=</tt>, <tt CLASS=literal>&gt;</tt>) return
<tt CLASS=literal>false</tt> when one of their arguments is NaN.  The
exception is <tt CLASS=literal>!=</tt>, which returns
<tt CLASS=literal>true</tt> when one of its arguments is NaN.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.143">NEGATIVE_INFINITY</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.148"><tt CLASS=literal>public static final double NEGATIVE_INFINITY = -1.0 / 0.0</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This variable represents the value negative infinity, which
is produced when a <tt CLASS=literal>double</tt> operation underflows
or a negative <tt CLASS=literal>double</tt> value is divided by zero.
Negative infinity is by definition less than any other <tt CLASS=literal>double</tt>
value.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.144">POSITIVE_INFINITY</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.149"><tt CLASS=literal>public static final double POSITIVE_INFINITY = 1.0 / 0.0</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This variable represents the value positive infinity, which
is produced when a <tt CLASS=literal>double</tt> operation overflows
or a positive <tt CLASS=literal>double</tt> value is divided by zero.
Positive infinity is by definition greater than any other <tt CLASS=literal>double</tt>
value.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.145">TYPE</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.150"><tt CLASS=literal>public static final Class TYPE </tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>Class</tt> object that represents the type
<tt CLASS=literal>double</tt>.
It is always true that <tt CLASS=literal>Double.TYPE</tt> 
<tt CLASS=literal>==</tt> <tt CLASS=literal>double.class</tt>.</DL>
</DIV>

</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.58">Constructors</A></h2>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.146">Double</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.151"><tt CLASS=literal>public Double(double value)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>value</tt><br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>double</tt> value to be encapsulated
by this object.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
Creates a <tt CLASS=literal>Double</tt> object with the specified
<tt CLASS=literal>double</tt> value.</DL>
</DIV>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.152">public Double(String s) throws NumberFormatException</A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>s</tt><br>
<DD>

<P CLASS=para>
The string to be made into a <tt CLASS=literal>Double</tt>
object.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>NumberFormatException</tt><br>
<DD>

<P CLASS=para>
If the sequence of characters in the given <tt CLASS=literal>String</tt>
does not form a valid <tt CLASS=literal>double</tt> literal.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
Constructs a <tt CLASS=literal>Double</tt> object with the value
specified by the given string. The string must contain a sequence
of characters that forms a legal <tt CLASS=literal>double</tt> literal.</DL>
</DIV>

</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.59">Class Methods</A></h2>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.147">doubleToLongBits</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.153"><tt CLASS=literal>public static native long doubleToLongBits(double value)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>value</tt><br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>double</tt> value to be converted.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>long</tt> value that contains the same sequence
of bits as the representation of the given <tt CLASS=literal>double</tt> value.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the <tt CLASS=literal>long</tt> value that
contains the same sequence of bits as the representation of the
given <tt CLASS=literal>double</tt> value. The meaning of the bits in
the result is defined by the IEEE 754 floating-point format: bit
63 is the sign bit, bits 62-52 are the exponent, and bits 51-0 are
the mantissa.

<P CLASS=para>
An argument of <tt CLASS=literal>POSITIVE_INFINITY</tt>
produces the result <tt CLASS=literal>0x7ff0000000000000L</tt>, an argument
of <tt CLASS=literal>NEGATIVE_INFINITY</tt> produces the result <tt CLASS=literal>0xfff0000000000000L</tt>,
and an argument of <tt CLASS=literal>NaN</tt> produces the result <tt CLASS=literal>0x7ff8000000000000L</tt>.

<P CLASS=para>
The value returned by this method can be converted back to
the original <tt CLASS=literal>double</tt> value by the <tt CLASS=literal>longBitsToDouble()</tt> method.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.148">isInfinite</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.154"><tt CLASS=literal>static public boolean isInfinite(double v)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>v</tt><br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>double</tt> value to be tested.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>true</tt> if the specified value is equal to
<tt CLASS=literal>POSITIVE_INFINITY</tt> or <tt CLASS=literal>NEGATIVE_INFINITY</tt>;
otherwise <tt CLASS=literal>false</tt>.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method determines whether or not the specified value
is an infinity value.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.149">isNaN</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.155"><tt CLASS=literal>public static boolean isNaN(double v)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>v</tt><br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>double</tt> value to be tested.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>true</tt> if the specified value is equal to
<tt CLASS=literal>NaN</tt>; otherwise <tt CLASS=literal>false</tt>.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method determines whether or not the specified value
is NaN.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.150">longBitsToDouble</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.156"><tt CLASS=literal>public static native double longBitsToDouble(long bits)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>bits</tt><br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>long</tt> value to be converted.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>double</tt> value whose representation is
the same as the bits in the given <tt CLASS=literal>long</tt> value.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the <tt CLASS=literal>double</tt> value whose
representation is the same as the bits in the given <tt CLASS=literal>double</tt>
value. The meaning of the bits in the <tt CLASS=literal>long</tt>
value is defined by the IEEE 754 floating-point format: bit 63 is
the sign bit, bits 62-52 are the exponent, and bits 51-0 are the
mantissa. The argument <tt CLASS=literal>0x7f80000000000000L</tt> produces
the result <tt CLASS=literal>POSITIVE_INFINITY</tt> and the argument
<tt CLASS=literal>0xff80000000000000L</tt> produces the result <tt CLASS=literal>NEGATIVE_INFINITY</tt>.
Arguments in the ranges <tt CLASS=literal>0x7ff0000000000001L</tt> through
<tt CLASS=literal>0x7fffffffffffffffL</tt> and <tt CLASS=literal>0xfff0000000000001L</tt>
through <tt CLASS=literal>0xffffffffffffffffL</tt> all produce the result
<tt CLASS=literal>NaN</tt>.

<P CLASS=para>
Except for NaN values not normally used by Java, this method
is the inverse of the <tt CLASS=literal>doubleToLongBits()</tt> method.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.151">toString</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.157"><tt CLASS=literal>public static String toString(double d)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>d</tt><br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>double</tt> value to be converted.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
A string representation of the given value.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns a <tt CLASS=literal>String</tt> object that
contains a representation of the given <tt CLASS=literal>double</tt> value.

<P CLASS=para>
The values <tt CLASS=literal>NaN</tt>,<tt CLASS=literal> NEGATIVE_INFINITY</tt>,
<tt CLASS=literal>POSITIVE_INFINITY</tt>, <tt CLASS=literal>-0.0</tt>, and
<tt CLASS=literal>+0.0</tt> are represented by 
the strings <tt CLASS=literal>"NaN"</tt>, <tt CLASS=literal>"--Infinity"</tt>, 
<tt CLASS=literal>"Infinity"</tt>, <tt CLASS=literal>"--0.0"</tt>, 
and <tt CLASS=literal>"0.0"</tt>, respectively.

<P CLASS=para>
For other values, the exact string representation depends
on the value being converted. If the absolute value of <tt CLASS=literal>d</tt>
is greater than or equal to 10^-3 
or less than or equal to 10^7, it
is converted to a string with an optional minus sign (if the
value is negative) followed by up to eight digits
before the decimal point, a decimal point, and the necessary number
of digits after the decimal point (but no trailing zero if there is 
more than one significant digit).  There is always a minimum of
one digit after the decimal point.

<P CLASS=para>
Otherwise, the value is converted to a string with an optional
minus sign (if the value is negative), followed by a single digit,
a decimal point, the necessary number of digits after the decimal
point (but no trailing zero if there is more than one significant digit),
and the letter <tt CLASS=literal>E</tt> followed by a plus or a minus 
sign and a base 10 exponent of at least one digit.  Again, there is always 
a minimum of one digit after the decimal point.

<P CLASS=para>
Note that the definition of this method has changed as of JDK 1.1.  
Prior to that release, the method provided a string representation
that was equivalent to the <tt CLASS=literal>%g</tt> format of 
the <tt CLASS=literal>printf</tt> function in C.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.152">valueOf</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.158"><DIV CLASS=screen> <P> <PRE> public static Double valueOf(String s) throws NumberFormatException </PRE> </DIV></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>s</tt><br>
<DD>

<P CLASS=para>
The string to be made into a <tt CLASS=literal>Double</tt>
object.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The <tt CLASS=literal>Double</tt> object constructed from the
string.

<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>NumberFormatException</tt><br>
<DD>

<P CLASS=para>
If the sequence of characters in the given <tt CLASS=literal>String</tt>
does not form a valid <tt CLASS=literal>double</tt> literal.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
Constructs a <tt CLASS=literal>Double</tt> object with the value
specified by the given string. The string must contain a sequence
of characters that forms a legal <tt CLASS=literal>double</tt> literal.
This method ignores leading and trailing white space in the string.</DL>
</DIV>

</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.60">Instance Methods</A></h2>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.153">byteValue</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.159"><tt CLASS=literal>public byte byteValue()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of this object as a <tt CLASS=literal>byte</tt>.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Number.byteValue()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the truncated value of this object as a
<tt CLASS=literal>byte</tt>. More specifically, if the value of the object
is <tt CLASS=literal>NaN</tt>, the method returns 0. If the value is
<tt CLASS=literal>POSITIVE_INFINITY</tt>, or any other value that is too
large to be represented by an <tt CLASS=literal>byte</tt>, the method
returns <tt CLASS=literal>Byte.MAX_VALUE</tt>. If the value is
<tt CLASS=literal>NEGATIVE_INFINITY</tt>, or any other value that is too
small to be represented by an <tt CLASS=literal>byte</tt>, the method
returns <tt CLASS=literal>Byte.MIN_VALUE</tt>. Otherwise, the value is
rounded toward zero and returned.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.154">doubleValue</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.160"><tt CLASS=literal>public double doubleValue()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of this object as a <tt CLASS=literal>double</tt>.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Number.doubleValue()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the value of this object as a <tt CLASS=literal>double</tt>.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.155">equals</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.161"><tt CLASS=literal>public boolean equals(Object obj)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>obj</tt><br>
<DD>

<P CLASS=para>
The object to be compared with this object.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>true</tt> if the objects are equal; <tt CLASS=literal>false</tt>
if they are not.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Object.equals()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns <tt CLASS=literal>true</tt> if <tt CLASS=literal>obj</tt>
is an instance of <tt CLASS=literal>Double</tt> and it contains the same
value as the object this method is associated with. More specifically,
the method returns <tt CLASS=literal>true</tt> if the
<tt CLASS=literal>doubleToLongBits()</tt> method returns the same result
for the values of both objects.

<P CLASS=para>
This method produces a different result than the <tt CLASS=literal>==</tt>
operator when both values are <tt CLASS=literal>NaN</tt>. In this case,
the <tt CLASS=literal>==</tt> operator produces <tt CLASS=literal>false</tt>,
while this method returns <tt CLASS=literal>true</tt>. By the same token,
the method also produces a different result when the two values
are <tt CLASS=literal>+0.0</tt> and <tt CLASS=literal>-0.0</tt>. In this
case, the <tt CLASS=literal>==</tt> operator produces <tt CLASS=literal>true</tt>,
while this method returns <tt CLASS=literal>false</tt>.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.156">floatValue</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.162"><tt CLASS=literal>public float floatValue()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of this object as a <tt CLASS=literal>float</tt>.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Number.floatValue()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns this object value as a <tt CLASS=literal>float</tt>.
Rounding may occur.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.157">hashCode</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.163"><tt CLASS=literal>public int hashCode()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
A hashcode based on the <tt CLASS=literal>double</tt> value of
the object.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Object.hashCode()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns a hashcode computed from the value of
this object. More specifically, if <tt CLASS=literal>d</tt> is the value
of the object, and <tt CLASS=literal>bitValue</tt> is defined as:

<DIV CLASS=screen>
<P>
<PRE>
long bitValue = Double.doubleToLongBits(d)
</PRE>
</DIV>

<P CLASS=para>
then the hashcode returned by this method is computed as
follows:

<DIV CLASS=screen>
<P>
<PRE>
(int)(bitValue ^ (bitValue&gt;&gt;&gt;32))
</PRE>
</DIV>

</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.158">intValue</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.164"><tt CLASS=literal>public int intValue()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of this object as an <tt CLASS=literal>int</tt>.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Number.intValue()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the truncated value of this object as an
<tt CLASS=literal>int</tt>. More specifically, if the value of the object
is <tt CLASS=literal>NaN</tt>, the method returns 0. If the value is
<tt CLASS=literal>POSITIVE_INFINITY</tt>, or any other value that is too
large to be represented by an <tt CLASS=literal>int</tt>, the method
returns <tt CLASS=literal>Integer.MAX_VALUE</tt>. If the value is
<tt CLASS=literal>NEGATIVE_INFINITY</tt>, or any other value that is too
small to be represented by an <tt CLASS=literal>int</tt>, the method
returns <tt CLASS=literal>Integer.MIN_VALUE</tt>. Otherwise, the value is
rounded toward zero and returned.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.159">isInfinite</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.165"><tt CLASS=literal>public boolean isInfinite()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>true</tt> if the value of this object is equal
to <tt CLASS=literal>POSITIVE_INFINITY</tt> or <tt CLASS=literal>NEGATIVE_INFINITY</tt>;
otherwise <tt CLASS=literal>false</tt>.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method determines whether or not the value of this object
is an infinity value.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.160">isNaN</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.166"><tt CLASS=literal>public boolean isNaN()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>true</tt> if the value of this object is equal
to <tt CLASS=literal>NaN</tt>; otherwise <tt CLASS=literal>false</tt>.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method determines whether or not the value of this object
is NaN.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.161">longValue</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.167"><tt CLASS=literal>public long longValue()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of this object as a <tt CLASS=literal>long</tt>.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Number.longValue()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the truncated value of this object as
a <tt CLASS=literal>long</tt>. More specifically, if the value of the
object is <tt CLASS=literal>NaN</tt>, the method returns 0. If the value
is <tt CLASS=literal>POSITIVE_INFINITY</tt>, or any other value too
large to be represented by a <tt CLASS=literal>long</tt>, the method
returns <tt CLASS=literal>Long.MAX_VALUE</tt>. If the
value is <tt CLASS=literal>NEGATIVE_INFINITY</tt>,
or any other value too small to be represented by a <tt CLASS=literal>long</tt>,
the method returns <tt CLASS=literal>Long.MIN_VALUE</tt>. Otherwise,
the value is rounded toward zero and returned.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.162">shortValue</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.168"><tt CLASS=literal>public short shortValue()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of this object as a <tt CLASS=literal>short</tt>.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Number.shortValue()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the truncated value of this object as a
<tt CLASS=literal>short</tt>. More specifically, if the value of the object
is <tt CLASS=literal>NaN</tt>, the method returns 0. If the value is
<tt CLASS=literal>POSITIVE_INFINITY</tt>, or any other value that is too
large to be represented by an <tt CLASS=literal>short</tt>, the method
returns <tt CLASS=literal>Short.MAX_VALUE</tt>. If the value is
<tt CLASS=literal>NEGATIVE_INFINITY</tt>, or any other value that is too
small to be represented by an <tt CLASS=literal>short</tt>, the method
returns <tt CLASS=literal>Short.MIN_VALUE</tt>. Otherwise, the value is
rounded toward zero and returned.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.163">toString</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.169"><tt CLASS=literal>public String toString()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
A string representation of the value of this object.

<p>
<DT CLASS=varlistentry>Overrides<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>Object.toString()</tt>

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns a <tt CLASS=literal>String</tt> object that
contains a representation of the value of this object.

<P CLASS=para>
The values <tt CLASS=literal>NaN</tt>,<tt CLASS=literal> NEGATIVE_INFINITY</tt>,
<tt CLASS=literal>POSITIVE_INFINITY</tt>, <tt CLASS=literal>-0.0</tt>, and
<tt CLASS=literal>+0.0</tt> are represented by 
the strings <tt CLASS=literal>"NaN"</tt>, <tt CLASS=literal>"--Infinity"</tt>, 
<tt CLASS=literal>"Infinity"</tt>, <tt CLASS=literal>"--0.0"</tt>, 
and <tt CLASS=literal>"0.0"</tt>, respectively.

<P CLASS=para>
For other values, the exact string representation depends
on the value being converted. If the absolute value of this object
is greater than or equal to 10^-3 
or less than or equal to 10^7, it
is converted to a string with an optional minus sign (if the
value is negative) followed by up to eight digits
before the decimal point, a decimal point, and the necessary number
of digits after the decimal point (but no trailing zero if there is 
more than one significant digit).  There is always a minimum of
one digit after the decimal point.

<P CLASS=para>
Otherwise, the value is converted to a string with an optional
minus sign (if the value is negative), followed by a single digit,
a decimal point, the necessary number of digits after the decimal
point (but no trailing zero if there is more than one significant digit),
and the letter <tt CLASS=literal>E</tt> followed by a plus or a minus 
sign and a base 10 exponent of at least one digit. Again, there is always 
a minimum of one digit after the decimal point.

<P CLASS=para>
Note that the definition of this method has changed as of JDK 1.1.  
Prior to that release, the method provided a string representation
that was equivalent to the <tt CLASS=literal>%g</tt> format of 
the <tt CLASS=literal>printf</tt> function in C.</DL>
</DIV>

</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.61">Inherited Methods</A></h2>

<DIV CLASS=informaltable>
<P>
<TABLE CLASS=INFORMALTABLE>
<TR CLASS=row>
<TH ALIGN="left">

<P CLASS=para>
Method</TH>
<TH ALIGN="left">

<P CLASS=para>
Inherited From</TH>
<TH ALIGN="left">

<P CLASS=para>
Method</TH>
<TH ALIGN="left">

<P CLASS=para>
Inherited From</TH>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>clone()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>finalize()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>getClass()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>notify()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>notifyAll()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>wait()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>wait(long)</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>wait(long, int)</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
</TABLE>
<P>
</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.62">See Also</A></h2>

<P CLASS=para>
<A HREF="ch10_04.htm">Class</A>;
<A HREF="ch09_04.htm#JLR2-CH-9-SECT-4.1">Exceptions</A>;
<A HREF="ch10_09.htm">Float</A>;
<A HREF="ch02_02.htm#JLR2-CH-2-SECT-2.3.2">Floating-point literals</A>;
<A HREF="ch03_01.htm#JLR2-CH-3-SECT-1.1.2">Floating-point types</A>;
<A HREF="ch10_13.htm">Number</A>;
<A HREF="ch10_20.htm">String</A>

</DIV>


<DIV CLASS=htmlnav>

<P>
<HR align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch10_07.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><A HREF="ch10_09.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Compiler</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Float</td>
</tr>
</table>
<hr align=left width=515>

<IMG SRC="gifs/smnavbar.gif" USEMAP="#map" BORDER=0> 
<MAP NAME="map"> 
<AREA SHAPE=RECT COORDS="0,0,108,15" HREF="../javanut/index.htm"
alt="Java in a Nutshell"> 
<AREA SHAPE=RECT COORDS="109,0,200,15" HREF="../langref/index.htm" 
alt="Java Language Reference"> 
<AREA SHAPE=RECT COORDS="203,0,290,15" HREF="../awt/index.htm" 
alt="Java AWT"> 
<AREA SHAPE=RECT COORDS="291,0,419,15" HREF="../fclass/index.htm" 
alt="Java Fundamental Classes"> 
<AREA SHAPE=RECT COORDS="421,0,514,15" HREF="../exp/index.htm" 
alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
