<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>[Chapter 10] System</TITLE>
<META NAME="author" CONTENT="Mark Grand">
<META NAME="date" CONTENT="Fri Aug  8 15:28:35 1997">
<META NAME="form" CONTENT="html">
<META NAME="metadata" CONTENT="dublincore.0.1">
<META NAME="objecttype" CONTENT="book part">
<META NAME="otheragent" CONTENT="gmat dbtohtml">
<META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc.">
<META NAME="source" CONTENT="SGML">
<META NAME="subject" CONTENT="java">
<META NAME="title" CONTENT="Java Language Reference">
<META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript">
</HEAD>
<body vlink="#551a8b" alink="#ff0000" text="#000000" bgcolor="#FFFFFF" link="#0000ee">

<DIV CLASS=htmlnav>
<H1><a href='index.htm'><IMG SRC="gifs/smbanner.gif"
     ALT="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch10_21.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><B><FONT FACE="ARIEL,HELVETICA,HELV,SANSERIF" SIZE="-1">Chapter 10<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><A HREF="ch10_23.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<DIV CLASS=refnamediv>
<H1>System</H1>

<H2>Name</H2>

System

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.162">Synopsis</A></h2>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Class Name:<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>java.lang.System</tt>

<p>
<DT CLASS=varlistentry>Superclass:<br>
<DD>

<P CLASS=para>
<tt CLASS=literal>java.lang.Object</tt>

<p>
<DT CLASS=varlistentry>Immediate Subclasses:<br>
<DD>

<P CLASS=para>
None

<p>
<DT CLASS=varlistentry>Interfaces Implemented:<br>
<DD>

<P CLASS=para>
None

<p>
<DT CLASS=varlistentry>Availability:<br>
<DD>

<P CLASS=para>
JDK 1.0 or later</DL>
</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.163">Description</A></h2>

<P CLASS=para>
<A NAME="MAN.SYS.1"></A>The <tt CLASS=literal>System</tt>
class provides access to various information about the operating
system environment in which a program is running. For example, the
<tt CLASS=literal>System</tt> class defines variables that allow access
to the standard I/O streams and methods that allow a program to
run the garbage collector and stop the Java virtual machine.

<P CLASS=para>
All of the variables and methods in the <tt CLASS=literal>System</tt>
class are <tt CLASS=literal>static</tt>. In other words, it is not necessary
to create an instance of the <tt CLASS=literal>System</tt> class in
order to use its variables and methods. In fact, the <tt CLASS=literal>System</tt>
class does not define any <tt CLASS=literal>public</tt> constructors,
so it cannot be instantiated.

<P CLASS=para>
The <tt CLASS=literal>System</tt>
class supports the concept of system properties
that can be queried and set. The following properties are guaranteed
always to be defined:

<DIV CLASS=informaltable>
<P>
<TABLE CLASS=INFORMALTABLE>
<TR CLASS=row>
<TH ALIGN="left">

<P CLASS=para>
Property Name</TH>
<TH ALIGN="left">

<P CLASS=para>
Description</TH>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>file.encoding</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The character encoding for the default locale (Java 1.1 only)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>file.encoding.pkg</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The package that contains converters between local encodings and Unicode (Java 1.1 only)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>file.separator</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
File separator (<tt CLASS=literal>'/'</tt> on UNIX, <tt CLASS=literal>' \'</tt> on Windows)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.class.path</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The class path</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.class.version</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Java class version number</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.compiler</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The just-in-time compiler to use, if any (Java 1.1 only)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.home</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Java installation directory</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.vendor</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Java vendor-specific string</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.vendor.url</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Java vendor URL</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>java.version</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Java version number</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>line.separator</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Line separator(<tt CLASS=literal>' \n'</tt> on UNIX, <tt CLASS=literal>' \r\n'</tt> on Windows)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>os.arch</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Operating system architecture</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>os.name</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Operating system name</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>os.version</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Operating system version</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>path.separator</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
Path separator (<tt CLASS=literal>':'</tt> on UNIX, <tt CLASS=literal>','</tt> on Windows)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>user.dir</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
User's current working directory when the properties were initialized</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>user.home</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
User's home directory</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>user.language</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The two-letter language code of the default locale (Java 1.1 only)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>user.name</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
User's account name</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>user.region</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The two-letter country code of the default locale (Java 1.1 only)</TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>user.timezone</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
The default time zone (Java 1.1 only)</TD>
</TR>
</TABLE>
<P>
</DIV>

<P CLASS=para>
Additional properties may be defined by the run-time environment.
The <tt CLASS=literal>-D</tt> command-line option can be used to define
system properties when a program is run.

<P CLASS=para>
The <tt CLASS=literal>Runtime</tt> class is related to the <tt CLASS=literal>System</tt>
class; it provides access to information about the environment in
which a program is running.

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.164">Class Summary</A></h2>

<DIV CLASS=screen>
<P>
<PRE>
public final class java.lang.System extends java.lang.Object {
    // Constants
    public static final PrintStream err;
    public static final InputStream in;
    public static final PrintStream out;
    // Class Methods
    public static void arraycopy(Object src, int srcOffset,
                                 Object dst, int dstOffset, int length);
    public static long currentTimeMillis();
    public static void exit(int status);
    public static void gc();
    public static Properties getProperties();
    public static String getProperty(String key);
    public static String getProperty(String key, String default); 
    public static SecurityManager getSecurityManager();
    public static String getenv(String name);           // Deprecated in 1.1
    public static native int identityHashCode(Object x);   // New in 1.1
    public static void load(String filename);
    public static void loadLibrary(String libname);
    public static void runFinalization();
    public static void runFinalizersOnExit(boolean value); // New in 1.1
    public static void setErr(PrintStream err);            // New in 1.1
    public static void setIn(InputStream in);              // New in 1.1
    public static void setOut(PrintStream out);            // New in 1.1
    public static void setProperties(Properties props);
    public static void setSecurityManager(SecurityManager s);
}
</PRE>
</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.165">Variables</A></h2>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.378">err</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.473"><tt CLASS=literal>public static final PrintStream err</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
  
  
The standard error stream. In an application environment,
this variable refers to a <tt CLASS=literal>java.io.PrintStream</tt>
object that is associated with the standard error output for the
process running the Java virtual machine. In an applet environment,
the <tt CLASS=literal>PrintStream</tt> is likely to be associated with
a separate window, although this is not guaranteed.

<P CLASS=para>
The value of <tt CLASS=literal>err</tt> can be set using the 
<tt CLASS=literal>setErr()</tt> method.  The value of <tt CLASS=literal>err</tt>
can only be set if the currenly installed <tt CLASS=literal>SecurityManager</tt>
does not throw a <tt CLASS=literal>SecurityException</tt> when the
request is made.

<P CLASS=para>
Prior to to Java 1.1, <tt CLASS=literal>err</tt> was not 
<tt CLASS=literal>final</tt>. It has been made <tt CLASS=literal>final</tt>
as of Java 1.1 because the unchecked ability to set <tt CLASS=literal>err</tt> 
is a security hole.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.379">in</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.474"><tt CLASS=literal>public static final InputStream in </tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
  
  
The standard input stream. In an application environment,
this variable refers to a <tt CLASS=literal>java.io.InputStream</tt>
object that is associated with the standard input for the process
running the Java virtual machine.

<P CLASS=para>
The value of <tt CLASS=literal>in</tt> can be set using the 
<tt CLASS=literal>setIn()</tt> method.  The value of <tt CLASS=literal>in</tt>
can only be set if the currenly installed <tt CLASS=literal>SecurityManager</tt>
does not throw a <tt CLASS=literal>SecurityException</tt> when the
request is made.

<P CLASS=para>
Prior to to Java 1.1, <tt CLASS=literal>in</tt> was not 
<tt CLASS=literal>final</tt>. It has been made <tt CLASS=literal>final</tt>
as of Java 1.1 because the unchecked ability to set <tt CLASS=literal>in</tt> 
is a security hole.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.380">out</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.475"><tt CLASS=literal>public static final PrintStream out </tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
  
  
The standard output stream. In an application environment,
this variable refers to a <tt CLASS=literal>java.io.PrintStream</tt>
object that is associated with the standard output for the process
running the Java virtual machine. In an applet environment, the
<tt CLASS=literal>PrintStream </tt>is likely to be associated with a
separate window, although this is not guaranteed.

<P CLASS=para>
<tt CLASS=literal>out</tt>
is the most commonly used of the three I/O streams provided
by the <tt CLASS=literal>System</tt> class. Even in GUI-based applications,
sending output to this stream can be useful for debugging. The usual
idiom for sending output to this stream is:

<DIV CLASS=screen>
<P>
<PRE>
System.out.println("Some text");
</PRE>
</DIV>

<P CLASS=para>
The value of <tt CLASS=literal>out</tt> can be set using the 
<tt CLASS=literal>setOut()</tt> method.  The value of <tt CLASS=literal>out</tt>
can only be set if the currenly installed <tt CLASS=literal>SecurityManager</tt>
does not throw a <tt CLASS=literal>SecurityException</tt> when the
request is made.

<P CLASS=para>
Prior to to Java 1.1, <tt CLASS=literal>out</tt> was not 
<tt CLASS=literal>final</tt>. It has been made <tt CLASS=literal>final</tt>
as of Java 1.1 because the unchecked ability to set <tt CLASS=literal>out</tt> 
is a security hole.</DL>
</DIV>

</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.166">Class Methods</A></h2>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.381">arraycopy</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.476"><DIV CLASS=screen> <P> <PRE> public static void arraycopy(Object src, int src_position, Object dst, int dst_position, int length) </PRE> </DIV></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>src</tt><br>
<DD>

<P CLASS=para>
The source array.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>src_position</tt><br>
<DD>

<P CLASS=para>
An index into the source array.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>dst</tt><br>
<DD>

<P CLASS=para>
The destination array.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>dst_position</tt><br>
<DD>

<P CLASS=para>
An index into the destination array.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>length</tt><br>
<DD>

<P CLASS=para>
The number of elements to be copied.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>ArrayIndexOutOfBoundsException</tt><br>
<DD>

<P CLASS=para>
If the values of the <tt CLASS=literal>src_position</tt>,
<tt CLASS=literal>dst_position</tt>, and <tt CLASS=literal>length </tt>arguments
imply accessing either array with an index that is less than zero
or an index greater than or equal to the number of elements in the
array.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>ArrayStoreException</tt><br>
<DD>

<P CLASS=para>
If the type of value stored in the <tt CLASS=literal>src</tt>
array cannot be stored in the <tt CLASS=literal>dst</tt> array.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>NullPointerException</tt><br>
<DD>

<P CLASS=para>
If <tt CLASS=literal>src</tt> or <tt CLASS=literal>dst</tt>
is <tt CLASS=literal>null</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method copies a range of array elements from the <tt CLASS=literal>src</tt>
array to the <tt CLASS=literal>dst</tt> array. The number of elements
that are copied is specified by <tt CLASS=literal>length</tt>. The elements
at positions <tt CLASS=literal>src_position</tt> through <tt CLASS=literal>src_position+length-1</tt>
in <tt CLASS=literal>src</tt> are copied to the positions <tt CLASS=literal>dst_position</tt>
through <tt CLASS=literal>dst_position+length-1</tt> in <tt CLASS=literal>dst</tt>,
respectively.

<P CLASS=para>
If <tt CLASS=literal>src</tt> and <tt CLASS=literal>dst </tt>refer
to the same array, the copying is done as if the array elements
were first copied to a temporary array and then copied to the destination
array.

<P CLASS=para>
Before this method does any copying, it performs a number
of checks. If either <tt CLASS=literal>src</tt> or <tt CLASS=literal>dst</tt>
are <tt CLASS=literal>null</tt>, the method throws a <tt CLASS=literal>NullPointerException</tt>
and <tt CLASS=literal>dst</tt> is not modified.

<P CLASS=para>
If any of the following conditions are true, the method throws
an <tt CLASS=literal>ArrayStoreException</tt>, and <tt CLASS=literal>dst</tt>
is not modified:

<P>
<UL CLASS=itemizedlist>
<li CLASS=listitem>Either <tt CLASS=literal>src</tt> or <tt CLASS=literal>dst</tt>
refers to an object that is not an array.

<P>
<li CLASS=listitem><tt CLASS=literal>src</tt> and <tt CLASS=literal>dst</tt> refer
to arrays whose element types are different primitive types.

<P>
<li CLASS=listitem><tt CLASS=literal>src </tt>refers to an array that has
elements that contain a primitive type, while <tt CLASS=literal>dst</tt>
refers to an array that has elements that contain a reference type,
or vice versa.

<P>
</UL>
<P CLASS=para>
If any of the following conditions are true, the method throws
an <tt CLASS=literal>ArrayIndexOutOfBoundsException</tt>, and <tt CLASS=literal>dst</tt>
is not modified:

<P>
<UL CLASS=itemizedlist>
<li CLASS=listitem><tt CLASS=literal>srcOffset</tt>, <tt CLASS=literal>dstOffset</tt>,
or <tt CLASS=literal>length </tt>is negative.

<P>
<li CLASS=listitem><tt CLASS=literal>srcOffset+length</tt> is greater than
<tt CLASS=literal>src.length()</tt>.

<P>
<li CLASS=listitem><tt CLASS=literal>dstOffset+length</tt> is greater than
<tt CLASS=literal>dst.length()</tt>.

<P>
</UL>
<P CLASS=para>
Otherwise, if an element in the source array being
copied cannot be converted to the type of the destination array
using the rules of the assignment operator, the method throws an
<tt CLASS=literal>ArrayStoreException</tt> when the problem occurs.
Since the problem is discovered during the copy operation, the state
of the <tt CLASS=literal>dst</tt> array reflects the incomplete copy
operation.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.382">currentTimeMillis</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.477"><tt CLASS=literal>public static native long currentTimeMillis()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The current time as the number of milliseconds since 00:00:00
UTC, January 1, 1970.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the current time as the number of milliseconds
since 00:00:00 UTC, January 1, 1970. It will not overflow until
the year 292280995.

<P CLASS=para>
The <tt CLASS=literal>java.util.Date</tt> class provides more
extensive facilities for dealing with times and dates.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.383">exit</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.478"><tt CLASS=literal>public static void exit(int status)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>status</tt><br>
<DD>

<P CLASS=para>
The exit status code to use.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkExit()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method causes the Java virtual machine
 to exit with the given status code. This method
works by calling the <tt CLASS=literal>exit()</tt> method of the current
<tt CLASS=literal>Runtime</tt> object. By convention, a nonzero status
code indicates abnormal termination. This method never returns.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.384">gc</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.479"><tt CLASS=literal>public static void gc()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method causes the Java virtual machine to run the garbage
collector in the current thread. This method works by calling the
<tt CLASS=literal>gc()</tt> method of the current <tt CLASS=literal>Runtime </tt>object.

<P CLASS=para>
The garbage collector finds objects that will never be used
again because there are no live references to them. After it finds
these objects, the garbage collector frees the storage occupied
by these objects.

<P CLASS=para>
The garbage collector is normally run continuously in a thread
with the lowest possible priority, so that it works intermittently
to reclaim storage. The <tt CLASS=literal>gc()</tt> method allows a
program to invoke the garbage collector explicitly when necessary.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.385">getProperties</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.480"><tt CLASS=literal>public static Properties getProperties()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
A <tt CLASS=literal>Properties</tt> object that contains the values
of all the system properies.

<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkPropertiesAccess()</tt>
method of the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns all of the defined system properties encapsulated
in a <tt CLASS=literal>java.util.Properties</tt>
object. If there are no system properties currently defined, a set
of default system properties is created and initialized. As discussed
in the description of the <tt CLASS=literal>System</tt> class, some
system properties are guaranteed always to be defined.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.386">getProperty</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.481"><tt CLASS=literal>public static String getProperty(String key)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>key</tt><br>
<DD>

<P CLASS=para>
The name of a system property.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of the named system property or <tt CLASS=literal>null </tt>if
the named property is not defined.

<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkPropertyAccess()</tt>
method of the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the value of the named system property. 
If there is no definition for the named property,
the method returns <tt CLASS=literal>null</tt>. If there are no system
properties currently defined, a set of default system properties
is created and initialized. As discussed in the description of the
<tt CLASS=literal>System</tt> class, some system properties are guaranteed
always to be defined.</DL>
</DIV>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.482"><tt CLASS=literal>public static String getProperty(String key, String def)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>key</tt><br>
<DD>

<P CLASS=para>
The name of a system property.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>def</tt><br>
<DD>

<P CLASS=para>
A default value for the property.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of the named system property, or the default value
if the named property is not defined.

<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkPropertyAccess()</tt>
method of the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the value of the named system property.
If there is no definition for the named property,
the method returns the default value as specified by the <tt CLASS=literal>def</tt>
parameter. If there are no system properties currently defined,
a set of default system properties is created and initialized. As
discussed earlier in the description of the <tt CLASS=literal>System</tt> class,
some system properties are guaranteed to always be defined.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.387">getSecurityManager</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.483"><tt CLASS=literal>public static SecurityManager getSecurityManager()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
A reference to the installed <tt CLASS=literal>SecurityManager</tt>
object or <tt CLASS=literal>null</tt> if there is no <tt CLASS=literal>SecurityManager</tt>
object installed.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns a reference to the installed <tt CLASS=literal>SecurityManager</tt>
object. If there is no <tt CLASS=literal>SecurityManager</tt> object
installed, the method returns <tt CLASS=literal>null</tt>.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.388">getenv</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.484"><tt CLASS=literal>public static String getenv(String name)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
Deprecated as of JDK 1.1

<p>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>name</tt><br>
<DD>

<P CLASS=para>
The name of a system-dependent environment variable.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The value of the environment variable or <tt CLASS=literal>null</tt>
if the variable is not defined.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method is obsolete; it always throws an error.  Use 
<tt CLASS=literal>getProperties()</tt> and the <tt CLASS=literal>-D</tt>
option instead.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.389">identityHashCode</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.485"><tt CLASS=literal>public static native int identityHashCode(Object x)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>x</tt><br>
<DD>

<P CLASS=para>
An object.</DL>
<p>
<DT CLASS=varlistentry>Returns<br>
<DD>

<P CLASS=para>
The identity hashcode value for the specified object.

<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method returns the same hashcode value for the specified
object as would be returned by the default <tt CLASS=literal>hashCode()</tt>
method of <tt CLASS=literal>Object</tt>, regardless of whether or not
the object's class overrides <tt CLASS=literal>hashCode()</tt>.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.390">load</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.486"><tt CLASS=literal>public void load(String filename)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>filename</tt><br>
<DD>

<P CLASS=para>
A string that specifies the complete path of the
file to be loaded.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkLink()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>UnsatisfiedLinkError</tt><br>
<DD>

<P CLASS=para>
If the method is unsuccessful in loading the specified
dynamically linked library.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method loads the specified dynamically linked library.
This method works by calling the <tt CLASS=literal>load()</tt> method
of the current <tt CLASS=literal>Runtime</tt> object.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.391">loadLibrary</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.487"><tt CLASS=literal>public void loadLibrary(String libname)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>libname</tt><br>
<DD>

<P CLASS=para>
A string that specifies the name of a dynamically linked
library.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkLink()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.

<p>
<DT CLASS=varlistentry><tt CLASS=literal>UnsatisfiedLinkError</tt><br>
<DD>

<P CLASS=para>
If the method is unsuccessful in loading the specified
dynamically linked library.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method loads the specified dynamically linked library.
It looks for the specified library in a platform-specific way. This
method works by calling the <tt CLASS=literal>loadLibrary()</tt> method
of the current <tt CLASS=literal>Runtime</tt> object.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.392">runFinalization</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.488"><tt CLASS=literal>public static void runFinalization()</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method causes the Java virtual machine to run the <tt CLASS=literal>finalize()</tt>
methods of any objects in the finalization queue in the current
thread. This method works by calling the <tt CLASS=literal>runFinalization()</tt>
method of the current <tt CLASS=literal>Runtime</tt> object.

<P CLASS=para>
When the garbage collector discovers that there are no references
to an object, it checks to see if the object has a <tt CLASS=literal>finalize()</tt>
method that has never been called. If the object has such a <tt CLASS=literal>finalize()</tt>
method, the object is placed in the finalization queue. While there
is a reference to the object in the finalization queue, the object
is no longer considered garbage collectable.

<P CLASS=para>
Normally, the objects in the finalization queue are handled
by a separate finalization thread that runs continuously at a very
low priority. The finalization thread removes an object from the
queue and calls its <tt CLASS=literal>finalize()</tt> method. As long
as the <tt CLASS=literal>finalize()</tt> method does not generate a
reference to the object, the object again becomes available for
garbage collection.

<P CLASS=para>
Because the finalization thread runs at a very low priority,
there may be a long delay from the time that an object is put on
the finalization queue until the time that its <tt CLASS=literal>finalize()</tt>
method is called. The <tt CLASS=literal>runFinalization()</tt> method
allows a program to run the <tt CLASS=literal>finalize()</tt> methods
explicitly. This can be useful when there is a shortage of some
resource that is released by a <tt CLASS=literal>finalize()</tt> method.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.393">runFinalizersOnExit</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.489"><tt CLASS=literal>public static void runFinalizersOnExit(boolean value)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>value</tt><br>
<DD>

<P CLASS=para>
A <tt CLASS=literal>boolean</tt> value that specifies whether or not
finalization occurs on exit.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkExit()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method specifies whether or not the <tt CLASS=literal>finalize()</tt> 
methods of all objects that have <tt CLASS=literal>finalize()</tt> methods
are run before the Java virtual machine exits.  By default, the
finalizers are not run on exit.  This method works by calling
the <tt CLASS=literal>runFinalizersOnExit()</tt> method of the current
<tt CLASS=literal>Runtime</tt> object.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.394">setErr</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.490"><tt CLASS=literal>public static void setErr(PrintStream err)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>err</tt><br>
<DD>

<P CLASS=para>
A <tt CLASS=literal>PrintStream</tt> object to use for the standard error
stream.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkExec()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method sets the standard error stream to be this 
<tt CLASS=literal>PrintStream</tt> object.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.395">setIn</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.491"><tt CLASS=literal>public static void setIn(InputStream in)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>in</tt><br>
<DD>

<P CLASS=para>
A <tt CLASS=literal>InputStream</tt> object to use for the standard input
stream.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkExec()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method sets the standard input stream to be this 
<tt CLASS=literal>InputStream</tt> object.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.396">setOut</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.492"><tt CLASS=literal>public static void setOut(PrintStream out)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Availability<br>
<DD>

<P CLASS=para>
New as of JDK 1.1

<p>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>out</tt><br>
<DD>

<P CLASS=para>
A <tt CLASS=literal>PrintStream</tt> object to use for the standard output
stream.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkExec()</tt> method of
the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method sets the standard output stream to be this 
<tt CLASS=literal>PrintStream</tt> object.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.397">setProperties</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.493"><tt CLASS=literal>public static void setProperties(Properties props)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>props</tt><br>
<DD>

<P CLASS=para>
A reference to a <tt CLASS=literal>Properties</tt> object.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If the <tt CLASS=literal>checkPropertiesAccess()</tt>
method of the <tt CLASS=literal>SecurityManager</tt> throws a <tt CLASS=literal>SecurityException</tt>.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method replaces the current set of system property definitions
with a new set of system property definitions that are encapsulated
by the given <tt CLASS=literal>Properties</tt> object. As discussed
in the description of the <tt CLASS=literal>System</tt> class, some
system properties are guaranteed to always be defined.</DL>
</DIV>

</DIV>

<DIV CLASS=refsect2>
<h3 CLASS=refsect2><A CLASS="TITLE" NAME="ch10-REFSECT2-AUTOID.398">setSecurityManager</A></h3>

<DIV CLASS=refsect3>
<h4 CLASS=refsect3><A CLASS="TITLE" NAME="ch10-REFSECT3-AUTOID.494"><tt CLASS=literal>public static void setSecurityManager(SecurityManager s)</tt></A></h4>

<DL CLASS=variablelist>
<DT CLASS=varlistentry>Parameters<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>s</tt><br>
<DD>

<P CLASS=para>
A reference to a <tt CLASS=literal>SecurityManager</tt>
object.</DL>
<p>
<DT CLASS=varlistentry>Throws<br>
<DD>

<P>
<DL CLASS=variablelist>
<DT CLASS=varlistentry><tt CLASS=literal>SecurityException</tt><br>
<DD>

<P CLASS=para>
If a <tt CLASS=literal>SecurityManager</tt> object has
already been installed.</DL>
<p>
<DT CLASS=varlistentry>Description<br>
<DD>

<P CLASS=para>
This method installs the given <tt CLASS=literal>SecurityManager</tt>
object. If <tt CLASS=literal>s</tt> is <tt CLASS=literal>null</tt>, then
no <tt CLASS=literal>SecurityManager</tt> object is installed. Once
a <tt CLASS=literal>SecurityManager</tt> object is installed, any subsequent
calls to this method throw a <tt CLASS=literal>SecurityException</tt>.</DL>
</DIV>

</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.167">Inherited Methods</A></h2>

<DIV CLASS=informaltable>
<P>
<TABLE CLASS=INFORMALTABLE>
<TR CLASS=row>
<TH ALIGN="left">

<P CLASS=para>
Method</TH>
<TH ALIGN="left">

<P CLASS=para>
Inherited From</TH>
<TH ALIGN="left">

<P CLASS=para>
Method</TH>
<TH ALIGN="left">

<P CLASS=para>
Inherited From</TH>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>clone()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>equals(Object)</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>finalize()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>getClass()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>hashCode()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>notify()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>notifyAll()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>toString()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>wait()</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>wait(long)</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
</TR>
<TR CLASS=row>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>wait(long, int)</tt></TD>
<TD ALIGN="left">

<P CLASS=para>
<tt CLASS=literal>Object</tt></TD>
<TD ALIGN="left">&nbsp;</TD>
<TD ALIGN="left">&nbsp;</TD>
</TR>
</TABLE>
<P>
</DIV>

</DIV>

<DIV CLASS=refsect1>
<h2 CLASS=refsect1><A CLASS="TITLE" NAME="ch10-REFSECT1-AUTOID.168">See Also</A></h2>

<P CLASS=para>
<A HREF="ch04_13.htm#JLR2-CH-4-SECT-13.1">Assignment Compatibility</A>;
<A HREF="ch09_04.htm#JLR2-CH-9-SECT-4.2">Errors</A>;
<A HREF="ch09_04.htm#JLR2-CH-9-SECT-4.1">Exceptions</A>;
<A HREF="ch10_14.htm">Object</A>;
<A HREF="ch05_03.htm#JLR2-CH-5-SECT-3.4">Object Destruction</A>;
<A HREF="ch10_15.htm">Process</A>;
<A HREF="ch10_17.htm">Runtime</A>;
<A HREF="ch10_18.htm">SecurityManager</A>

</DIV>


<DIV CLASS=htmlnav>

<P>
<HR align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch10_21.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><A HREF="ch10_23.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>StringBuffer</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Thread</td>
</tr>
</table>
<hr align=left width=515>

<IMG SRC="gifs/smnavbar.gif" USEMAP="#map" BORDER=0> 
<MAP NAME="map"> 
<AREA SHAPE=RECT COORDS="0,0,108,15" HREF="../javanut/index.htm"
alt="Java in a Nutshell"> 
<AREA SHAPE=RECT COORDS="109,0,200,15" HREF="../langref/index.htm" 
alt="Java Language Reference"> 
<AREA SHAPE=RECT COORDS="203,0,290,15" HREF="../awt/index.htm" 
alt="Java AWT"> 
<AREA SHAPE=RECT COORDS="291,0,419,15" HREF="../fclass/index.htm" 
alt="Java Fundamental Classes"> 
<AREA SHAPE=RECT COORDS="421,0,514,15" HREF="../exp/index.htm" 
alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
