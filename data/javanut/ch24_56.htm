<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>[Chapter 24] 24.56 java.io.RandomAccessFile (JDK 1.0)</TITLE>
<META NAME="author" CONTENT="David Flanagan">
<META NAME="date" CONTENT="Thu Jul 31 16:22:54 1997">
<META NAME="form" CONTENT="html">
<META NAME="metadata" CONTENT="dublincore.0.1">
<META NAME="objecttype" CONTENT="book part">
<META NAME="otheragent" CONTENT="gmat dbtohtml">
<META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc.">
<META NAME="source" CONTENT="SGML">
<META NAME="subject" CONTENT="Java">
<META NAME="title" CONTENT="Java in a Nutshell">
<META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript">
</HEAD>
<body vlink="#551a8b" alink="#ff0000" text="#000000" bgcolor="#FFFFFF" link="#0000ee">

<DIV CLASS=htmlnav>
<H1><a href='index.htm'><IMG SRC="gifs/smbanner.gif"
     ALT="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch24_55.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><B><FONT FACE="ARIEL,HELVETICA,HELV,SANSERIF" SIZE="-1">Chapter 24<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><A HREF="ch24_57.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<DIV CLASS=sect1>
<h2 CLASS=sect1><A CLASS="TITLE" NAME="JNUT2-CH-24-SECT-56">24.56 java.io.RandomAccessFile (JDK 1.0)</A></h2>

<DIV CLASS=sect2>
<h3 CLASS=sect2><A CLASS="TITLE" NAME="JNUT2-CH-24-SECT-56.1"></A></h3>
</DIV>

<P CLASS=para>
This class allows reading and writing of arbitrary bytes,
text, and primitive Java data types from or to any specified
location in a file. Because this class provides random,
rather than sequential, access to files, it is neither a
subclass of <tt CLASS=literal>InputStream</tt> nor of <tt CLASS=literal>OutputStream</tt>,
but provides an entirely independent method for reading and
writing data from or to files. <tt CLASS=literal>RandomAccessFile</tt>
implements the same interfaces as <tt CLASS=literal>DataInputStream</tt>
and <tt CLASS=literal>DataOutputStream</tt>, and thus defines the same
methods for reading and writing data as those classes do.

<P CLASS=para>
The <tt CLASS=literal>seek()</tt> method provides random
access to the file--it is used to select the position in the
file from which, or to which, data should be read or written.
The <I CLASS=emphasis><tt CLASS=literal>mode</tt></I> argument to the constructor methods should
be "r" for a file that
is to be read-only, and "rw" for a
file that is to be written (and perhaps read as well).

<DIV CLASS=screen>
<P>
<PRE>
public class <tt CLASS=literal>RandomAccessFile</tt> extends Object implements DataOutput, DataInput {
    // <tt CLASS=literal>Public Constructors</tt>
            public <tt CLASS=literal>RandomAccessFile</tt>(String <tt CLASS=literal>name</tt>, String <tt CLASS=literal>mode</tt>) throws IOException;
            public <tt CLASS=literal>RandomAccessFile</tt>(File <tt CLASS=literal>file</tt>, String <tt CLASS=literal>mode</tt>) throws IOException;
    // <tt CLASS=literal>Public Instance Methods</tt>
            public native void <tt CLASS=literal>close</tt>() throws IOException;
            public final FileDescriptor <tt CLASS=literal>getFD</tt>() throws IOException;
            public native long <tt CLASS=literal>getFilePointer</tt>() throws IOException;
            public native long <tt CLASS=literal>length</tt>() throws IOException;
            public native int <tt CLASS=literal>read</tt>() throws IOException;
            public int <tt CLASS=literal>read</tt>(byte[] <tt CLASS=literal>b</tt>, int <tt CLASS=literal>off</tt>, int <tt CLASS=literal>len</tt>) throws IOException;
            public int <tt CLASS=literal>read</tt>(byte[] <tt CLASS=literal>b</tt>) throws IOException;
            public final boolean <tt CLASS=literal>readBoolean</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final byte <tt CLASS=literal>readByte</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final char <tt CLASS=literal>readChar</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final double <tt CLASS=literal>readDouble</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final float <tt CLASS=literal>readFloat</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final void <tt CLASS=literal>readFully</tt>(byte[] <tt CLASS=literal>b</tt>) throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final void <tt CLASS=literal>readFully</tt>(byte[] <tt CLASS=literal>b</tt>, int <tt CLASS=literal>off</tt>, int <tt CLASS=literal>len</tt>) throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>readInt</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final String <tt CLASS=literal>readLine</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final long <tt CLASS=literal>readLong</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final short <tt CLASS=literal>readShort</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final String <tt CLASS=literal>readUTF</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>readUnsignedByte</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>readUnsignedShort</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public native void <tt CLASS=literal>seek</tt>(long <tt CLASS=literal>pos</tt>) throws IOException;
            public int <tt CLASS=literal>skipBytes</tt>(int <tt CLASS=literal>n</tt>) throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public native void <tt CLASS=literal>write</tt>(int <tt CLASS=literal>b</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public void <tt CLASS=literal>write</tt>(byte[] <tt CLASS=literal>b</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public void <tt CLASS=literal>write</tt>(byte[] <tt CLASS=literal>b</tt>, int <tt CLASS=literal>off</tt>, int <tt CLASS=literal>len</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeBoolean</tt>(boolean <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeByte</tt>(int <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeBytes</tt>(String <tt CLASS=literal>s</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeChar</tt>(int <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeChars</tt>(String <tt CLASS=literal>s</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeDouble</tt>(double <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeFloat</tt>(float <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeInt</tt>(int <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeLong</tt>(long <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeShort</tt>(int <tt CLASS=literal>v</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
            public final void <tt CLASS=literal>writeUTF</tt>(String <tt CLASS=literal>str</tt>) throws IOException;  //<tt CLASS=literal> From DataOutput</tt>
}
</PRE>
</DIV>

<P CLASS=para>
</DIV>

</DIV>


<DIV CLASS=htmlnav>

<P>
<HR align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch24_55.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><A HREF="ch24_57.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.io.PushbackReader (JDK 1.1)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.io.Reader (JDK 1.1)</td>
</tr>
</table>
<hr align=left width=515>

<IMG SRC="gifs/smnavbar.gif" USEMAP="#map" BORDER=0> 
<MAP NAME="map"> 
<AREA SHAPE=RECT COORDS="0,0,108,15" HREF="../javanut/index.htm"
alt="Java in a Nutshell"> 
<AREA SHAPE=RECT COORDS="109,0,200,15" HREF="../langref/index.htm" 
alt="Java Language Reference"> 
<AREA SHAPE=RECT COORDS="203,0,290,15" HREF="../awt/index.htm" 
alt="Java AWT"> 
<AREA SHAPE=RECT COORDS="291,0,419,15" HREF="../fclass/index.htm" 
alt="Java Fundamental Classes"> 
<AREA SHAPE=RECT COORDS="421,0,514,15" HREF="../exp/index.htm" 
alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
