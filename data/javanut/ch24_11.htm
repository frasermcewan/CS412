<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>[Chapter 24] 24.11 java.io.DataInputStream (JDK 1.0)</TITLE>
<META NAME="author" CONTENT="David Flanagan">
<META NAME="date" CONTENT="Thu Jul 31 16:21:52 1997">
<META NAME="form" CONTENT="html">
<META NAME="metadata" CONTENT="dublincore.0.1">
<META NAME="objecttype" CONTENT="book part">
<META NAME="otheragent" CONTENT="gmat dbtohtml">
<META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc.">
<META NAME="source" CONTENT="SGML">
<META NAME="subject" CONTENT="Java">
<META NAME="title" CONTENT="Java in a Nutshell">
<META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript">
</HEAD>
<body vlink="#551a8b" alink="#ff0000" text="#000000" bgcolor="#FFFFFF" link="#0000ee">

<DIV CLASS=htmlnav>
<H1><a href='index.htm'><IMG SRC="gifs/smbanner.gif"
     ALT="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch24_10.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><B><FONT FACE="ARIEL,HELVETICA,HELV,SANSERIF" SIZE="-1">Chapter 24<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><A HREF="ch24_12.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<DIV CLASS=sect1>
<h2 CLASS=sect1><A CLASS="TITLE" NAME="JNUT2-CH-24-SECT-11">24.11 java.io.DataInputStream (JDK 1.0)</A></h2>

<DIV CLASS=sect2>
<h3 CLASS=sect2><A CLASS="TITLE" NAME="JNUT2-CH-24-SECT-11.1"></A></h3>
</DIV>

<P CLASS=para>
This class is a type of <tt CLASS=literal>FilterInputStream</tt> that
allows you to read binary representations of Java primitive data
types in a portable way.  Create a <tt CLASS=literal>DataInputStream</tt>
by specifying the <tt CLASS=literal>InputStream</tt> that is to be filtered
in the call to the constructor.

<P CLASS=para>
Many of this class's methods read and return a single Java
primitive type, in binary format, from the stream.
<tt CLASS=literal>readUnsignedByte()</tt> and <tt CLASS=literal>readUnsignedShort()</tt>
read unsigned values and return them as <tt CLASS=literal>int</tt> values,
since unsigned <tt CLASS=literal>byte</tt> and <tt CLASS=literal>short</tt> types are not
supported in Java. <tt CLASS=literal>read()</tt> reads data into an array
of bytes, blocking until at least some data are available.
By contrast, <tt CLASS=literal>readFully()</tt> reads data into an array of
bytes, but blocks until all of the requested data become
available. <tt CLASS=literal>skipBytes()</tt> blocks until the specified number of
bytes have been read and discarded.

<P CLASS=para>
<tt CLASS=literal>readLine()</tt> reads characters from the stream until
it encounters a newline, a carriage return, or a newline
carriage return pair. The returned string is not terminated
with a newline or carriage return.  This method is
deprecated in Java 1.1; see <tt CLASS=literal>BufferedReader</tt> for an
alternative.  <tt CLASS=literal>readUTF()</tt> reads a string of Unicode
text encoded in a slightly modified version of the UTF-8
"transformation format." UTF-8 is an ASCII-compatible
encoding of Unicode characters that is often used for the
transmission and storage of Unicode text.  This class uses a
modified UTF-8 encoding that never contains embedded null characters.

<P CLASS=para>
<tt CLASS=literal>DataInputStream</tt> only reads primitive Java types.  Use
<tt CLASS=literal>ObjectInputStream</tt> to read object values.

<DIV CLASS=screen>
<P>
<PRE>
public class <tt CLASS=literal>DataInputStream</tt> extends FilterInputStream implements DataInput {
    // <tt CLASS=literal>Public Constructor</tt>
            public <tt CLASS=literal>DataInputStream</tt>(InputStream <tt CLASS=literal>in</tt>);
    // <tt CLASS=literal>Class Methods</tt>
            public static final String <tt CLASS=literal>readUTF</tt>(DataInput <tt CLASS=literal>in</tt>) throws IOException;
    // <tt CLASS=literal>Public Instance Methods</tt>
            public final int <tt CLASS=literal>read</tt>(byte[] <tt CLASS=literal>b</tt>) throws IOException;  //<tt CLASS=literal> Overrides FilterInputStream</tt>
            public final int <tt CLASS=literal>read</tt>(byte[] <tt CLASS=literal>b</tt>, int <tt CLASS=literal>off</tt>, int <tt CLASS=literal>len</tt>) throws IOException;  //<tt CLASS=literal> Overrides FilterInputStream</tt>
            public final boolean <tt CLASS=literal>readBoolean</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final byte <tt CLASS=literal>readByte</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final char <tt CLASS=literal>readChar</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final double <tt CLASS=literal>readDouble</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final float <tt CLASS=literal>readFloat</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final void <tt CLASS=literal>readFully</tt>(byte[] <tt CLASS=literal>b</tt>) throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final void <tt CLASS=literal>readFully</tt>(byte[] <tt CLASS=literal>b</tt>, int <tt CLASS=literal>off</tt>, int <tt CLASS=literal>len</tt>) throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>readInt</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
        #   public final String <tt CLASS=literal>readLine</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final long <tt CLASS=literal>readLong</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final short <tt CLASS=literal>readShort</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final String <tt CLASS=literal>readUTF</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>readUnsignedByte</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>readUnsignedShort</tt>() throws IOException;  //<tt CLASS=literal> From DataInput</tt>
            public final int <tt CLASS=literal>skipBytes</tt>(int <tt CLASS=literal>n</tt>) throws IOException;  //<tt CLASS=literal> From DataInput</tt>
}
</PRE>
</DIV>

</DIV>

<DIV CLASS=sect2>
<h3 CLASS=sect2><A CLASS="TITLE" NAME="JNUT2-CH-24-SECT-11.2">Hierarchy:</A></h3>

<P CLASS=para>
Object->InputStream->FilterInputStream->DataInputStream(DataInput)

</DIV>

</DIV>


<DIV CLASS=htmlnav>

<P>
<HR align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><A HREF="ch24_10.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><A HREF="ch24_12.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.io.DataInput (JDK 1.0)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.io.DataOutput (JDK 1.0)</td>
</tr>
</table>
<hr align=left width=515>

<IMG SRC="gifs/smnavbar.gif" USEMAP="#map" BORDER=0> 
<MAP NAME="map"> 
<AREA SHAPE=RECT COORDS="0,0,108,15" HREF="../javanut/index.htm"
alt="Java in a Nutshell"> 
<AREA SHAPE=RECT COORDS="109,0,200,15" HREF="../langref/index.htm" 
alt="Java Language Reference"> 
<AREA SHAPE=RECT COORDS="203,0,290,15" HREF="../awt/index.htm" 
alt="Java AWT"> 
<AREA SHAPE=RECT COORDS="291,0,419,15" HREF="../fclass/index.htm" 
alt="Java Fundamental Classes"> 
<AREA SHAPE=RECT COORDS="421,0,514,15" HREF="../exp/index.htm" 
alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
